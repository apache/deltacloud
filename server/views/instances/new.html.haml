=header "Launch new instance"
=subheader "#{image.id}"

.hidden_content
  - hardware_profiles.each do |profile|
    %div{ :'data-role' => :fieldcontain, :id => "hwp_properties_#{profile.name}", :class => 'property_block'}
      - profile.properties.reject { |prop| prop.fixed? }.each do |prop|
        %label{ :for => "#{prop.param}_#{profile.name}", :class => 'ui-input-text' }=prop.name
        %span.radio-group-details
          - if prop.kind == :enum
            %select{ :size => 1, :name => prop.param }
              - for v in prop.values
                %option= v
                = prop.unit
          - elsif prop.kind == :range
            %input{ :type => :range, :value => prop.first, :min => prop.first, :max => prop.last, :name => prop.param}
          - else
            %input{ :name => prop.param, :size => 10, :value => "#{prop.default}" }= prop.unit

%div{ :'data-role' => :content, :'data-theme' => 'c', :class => 'middle-dialog'}
  %form{ :action => instances_url, :method => :post, :class => :new_instance, :enctype => 'multipart/form-data', :'data-ajax' => 'false'}
    %input{ :name => :image_id, :type => :hidden, :value => instance.image_id }/

    - if driver.class.has_feature?(:instances, :user_name)
      %div{ 'data-role' => :fieldcontain }
        %label{ :for => :name} Instance name:
        %input{ :type => :text, :id => :name, :name => :name, :value => '' }

    - if additional_features_for?(:instances, [:user_name])
      %div{ 'data-role' => :collapsible, 'data-collapsed' => "true"}
        %h3 Additional parameters

        - if driver.class.has_feature?(:instances, :user_data)
          %div{ 'data-role' => :fieldcontain }
            %label{ :for => :user_data} Base64 encoded user-data:
            %textarea{ :id => :user_data, :name => :user_data, :value => '' }
            %br/
            %a{ :href => "", :onclick => 'encodeb64();', :'data-ajax' => 'false'} Encode data

        - if driver.class.has_feature?(:instances, :instance_count)
          %div{ 'data-role' => :fieldcontain }
            %label{ :for => :instance_count} # of instances to be launched:
            %input{ :type => :text, :id => :instance_count, :name => :instance_count, :value => '1' }

        - if driver.class.has_feature?(:instances, :metrics)
          %div{ 'data-role' => :fieldcontain }
            %label{ :for => :metrics} Enable metrics for this instance
            %input{ :type => :checkbox, :id => :metrics, :name => :metrics, :checked => 'false' }

        - if driver.class.has_feature?(:instances, :authentication_key)
          %div{ 'data-role' => :fieldcontain }
            %label{ :for => :keyname, :class => 'ui-input-text'} Instance SSH key:
            %select{:name => 'keyname', :'data-native-menu' => "true" }
              %option{ :value => ''} None
              - keys.each do |key|
                %option{ :value => key.id } #{key.id}

        - if driver.class.has_feature?(:instances, :register_to_load_balancer)
          %div{ 'data-role' => :fieldcontain }
            %label{ :for => :load_balancer_id, :class => 'ui-input-text'} Register to loadbalancer:
            %select{:name => 'load_balancer_id', :'data-native-menu' => "true" }
              %option{ :value => ''} None
              - load_balancers.each do |load_balancer|
                %option{:value => load_balancer.id} #{load_balancer.id}

        - if driver.class.has_feature?(:instances, :firewalls)
          %div{ 'data-role' => :fieldcontain }
            %fieldset{ :'data-role' => 'controlgroup'}
              %legend Register to firewall:
              - firewalls.each_index do |i|
                - if firewalls[i].name == 'default'
                  %input{:type => :checkbox, :value => firewalls[i].name, :name => "firewalls#{i}", :checked => :true, :id => "firewalls#{i}"}/
                  %label{:for => "firewalls#{i}"} Default
                - else
                  %input{:type => :checkbox, :value => firewalls[i].name, :name => "firewalls#{i}", :id => "firewalls#{i}"}/
                  %label{:for => "firewalls#{i}"}=firewalls[i].name

        - if driver.class.has_feature?(:instances, :user_files)
          %div{ 'data-role' => :fieldcontain }
            %h3 Make user data file(s) available in launched Instance
            %h4 The path specified for each file below is where the data will be made available on the launched Instance.
            - for i in 1..5
              %h4 User file #{i}
              %input{ :type => :text, :id => "path#{i}", :name => "path#{i}", :value => ""} Path #{i}
              %input{ :type => "file", :name => "content#{i}", :size => 50 }

        - if driver.has_capability? :networks
          %div{ 'data-role' => :fieldcontain }
            %label{ :for => :network, :class => 'ui-input-text'} Network to Launch Instance into:
            %select{:name => 'network_id', :'data-native-menu' => "true" }
              %option{ :value => ''} None
              - @networks.each do |net|
                - net.subnets.each do |sn|
                  %option{ :value => "#{net.id}+#{sn}" } #{net.id}+#{sn}

    - if !hardware_profiles.empty?
      %div{ 'data-role' => :fieldcontain }
        %h3 Instance profile
        %fieldset{ :'data-role' => :fieldcontain}
          - hardware_profiles.each do |profile|
            %input{ :type => :radio, :name => 'hwp_id', :value => profile.id, :id => profile.name, :'data-theme' => 'b'}/
            %label{ :for => profile.name, :onclick => "expandHWP('#{profile.name}');"}="#{profile.name} - #{profile.memory} MB"
            %div{ :'data-role' => :fieldcontain, :id => "property_container_#{profile.name}", :class => 'hwp_properties'}

    - if !realms.empty?
      %div{ 'data-role' => :fieldcontain }
        %h3 Where do you want it?
        %fieldset{ :'data-role' => :fieldcontain}
          %legend
          - realms.each do |realm|
            %div{ :'data-role' => :fieldcontain}
              %label{ :for => realm.id }= "#{realm.name}, #{realm.limit}"
              %input{ :type => :radio, :name => 'realm_id', :value => realm.id, :id => realm.id, :'data-theme' => 'b' }/

    %button{ :type => :submit} Create instance
